import time
import adafruit_dht
import RPi.GPIO as GPIO
import spidev
import board
import busio
from adafruit_character_lcd.character_lcd_i2c import Character_LCD_I2C

# Pin and sensor configuration
DHT_PIN = board.D4  # Use board.D4 for CircuitPython compatibility
SOIL_MOISTURE_CHANNEL = 0
PUMP_RELAY_PIN = 17
I2C_LCD_ADDRESS = 0x27  # Change if your I2C address differs
LCD_COLUMNS = 16
LCD_ROWS = 2

try:
    # GPIO setup
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(PUMP_RELAY_PIN, GPIO.OUT)
    GPIO.output(PUMP_RELAY_PIN, GPIO.HIGH)  # Ensure pump is off initially
except Exception as e:
    print(f"Error during GPIO setup: {e}")
    exit(1)

try:
    # I2C and LCD setup
    i2c = busio.I2C(board.SCL, board.SDA)
    lcd = Character_LCD_I2C(i2c, 0x27, LCD_COLUMNS, LCD_ROWS)
    lcd.clear()
except Exception as e:
    print(f"Error initializing I2C LCD: {e}")
    exit(1)

try:
    # SPI setup for soil moisture sensor
    spi = spidev.SpiDev()
    spi.open(0, 0)
    spi.max_speed_hz = 1350000
except Exception as e:
    print(f"Error initializing SPI: {e}")
    exit(1)

try:
    # Initialize DHT11 sensor
    dht_device = adafruit_dht.DHT11(DHT_PIN)
except Exception as e:
    print(f"Error initializing DHT sensor: {e}")
    exit(1)

# Function to read SPI data
def read_spi(channel):
    try:
        if channel < 0 or channel > 7:
            raise ValueError("Invalid SPI channel")
        adc = spi.xfer2([1, (8 + channel) << 4, 0])
        data = ((adc[1] & 3) << 8) + adc[2]
        return data
    except Exception as e:
        print(f"Error reading SPI data: {e}")
        return -1

# Main loop
try:
    while True:
        # Read temperature and humidity
        try:
            temperature = dht_device.temperature
            humidity = dht_device.humidity
        except RuntimeError as e:
            print(f"Error reading DHT sensor: {e}")
            lcd.clear()
            lcd.message = "Sensor Error"
            time.sleep(2)
            continue
        except Exception as e:
            print(f"Unexpected error reading DHT sensor: {e}")
            break

        # Read soil moisture
        try:
            soil_moisture = read_spi(SOIL_MOISTURE_CHANNEL)
        except Exception as e:
            print(f"Error reading soil moisture: {e}")
            soil_moisture = -1

        # Display data on LCD
        try:
            lcd.clear()
            lcd.message = f"Temp: {temperature:.1f}C\nHum: {humidity:.1f}%"
            time.sleep(2)
            lcd.clear()
            lcd.message = f"Soil: {soil_moisture}"
        except Exception as e:
            print(f"Error displaying data on LCD: {e}")

        # Control pump based on soil moisture
        try:
            if soil_moisture < 300:  # Adjust threshold as needed
                GPIO.output(PUMP_RELAY_PIN, GPIO.LOW)  # Turn on pump
                lcd.message += "\nPump: ON"
            else:
                GPIO.output(PUMP_RELAY_PIN, GPIO.HIGH)  # Turn off pump
                lcd.message += "\nPump: OFF"
        except Exception as e:
            print(f"Error controlling pump: {e}")

        time.sleep(5)

except KeyboardInterrupt:
    print("Exiting gracefully...")

except Exception as e:
    print(f"Unexpected error in main loop: {e}")

finally:
    try:
        GPIO.cleanup()
    except Exception as e:
        print(f"Error during GPIO cleanup: {e}")
    try:
        spi.close()
    except Exception as e:
        print(f"Error closing SPI: {e}")
    try:
        lcd.clear()
    except Exception as e:
        print(f"Error clearing LCD: {e}")